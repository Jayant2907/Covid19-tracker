{"version":3,"sources":["util.js","Map.js","InfoBox.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["casesTypeColors","cases","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","className","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","color","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","InfoBox","title","Select","isRed","total","props","Card","onClick","CardContent","Typography","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","tabledata","setTableData","setCountryInfo","setCasesType","lng","mapCenter","setMapCenter","mapZoom","mapCountries","setMapCountries","setCountry","name","iso2","sortedData","getCountriesData","onCountryChange","e","countryCode","target","FormControl","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0ae14303.chunk.js","sourcesContent":["import {Circle,Popup} from \"react-leaflet\"\r\nimport React from \"react\"\r\nimport numeral from \"numeral\"\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n      hex: \"#CC1034\",\r\n      rgb: \"rgb(204, 16, 52)\",\r\n      half_op: \"rgba(204, 16, 52, 0.5)\",\r\n      multiplier: 800,\r\n    },\r\n    recovered: {\r\n      hex: \"#7dd71d\",\r\n      rgb: \"rgb(125, 215, 29)\",\r\n      half_op: \"rgba(125, 215, 29, 0.5)\",\r\n      multiplier: 1200,\r\n    },\r\n    deaths: {\r\n      hex: \"#fb4443\",\r\n      rgb: \"rgb(251, 68, 67)\",\r\n      half_op: \"rgba(251, 68, 67, 0.5)\",\r\n      multiplier: 2000,\r\n    },\r\n  };\r\n\r\nexport const sortData=(data)=>{\r\n    const sortedData=[...data]\r\n    return sortedData.sort((a,b)=>(a.cases>b.cases?-1:1))\r\n        \r\n    \r\n}\r\nexport const prettyPrintStat= (stat)=>(\r\n  stat?`+${numeral(stat).format(\"0.0a\")}`:\"+0\"\r\n)\r\n//draw circles onmap with interactive tooltip\r\nexport const showDataOnMap = (data,casesType='cases')=>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n  <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n  </Circle>\r\n         ))\r\n","import React from \"react\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;","import React from 'react'\r\nimport './infobox.css'\r\nimport {Card,CardContent,Typography} from '@material-ui/core'\r\nfunction InfoBox({title,cases,Select,isRed,total,...props}) {\r\n    return (\r\n        <Card className={`infoBox ${Select && 'infoBox--selected'} ${isRed && 'infoBox--red'}`} onClick={props.onClick}>\r\n            <CardContent>\r\n                <Typography color=\"textSecondary\" className=\"infoBox_title\">{title}</Typography>\r\n    <h2 className={`infoBox_cases ${!isRed && \"infoBox_cases--green\"}`}>{cases}</h2>\r\n                <Typography className=\"infoBox_total\" color=\"textSecondary\">{total} Total</Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from 'react'\r\nimport './Table.css'\r\n\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({country,cases})=>(\r\n                <tr>\r\n                    <td>{country}</td>\r\n            <td><strong>{cases}</strong></td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType=\"cases\",...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;","import React,{useState,useEffect} from 'react';\nimport { FormControl, MenuItem, Select } from '@material-ui/core'\nimport './App.css';\nimport Map from './Map'\nimport InfoBox from './InfoBox'\nimport Table from './Table'\nimport {Card,CardContent,Typography} from '@material-ui/core'\nimport { sortData } from './util';\nimport LineGraph from './LineGraph';\nimport \"leaflet/dist/leaflet.css\";\nimport {prettyPrintStat} from './util'\n\n\n\nfunction App() {\n  const [countries,setCountries]=useState([])\n  const [tabledata,setTableData]=useState([])\n  const [countryInfo,setCountryInfo]=useState({})\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter,setMapCenter]=useState({\n    lat:34.80746,lng:-40.4796\n  })\n  const [mapZoom,setMapZoom]=useState(3)\n  const [mapCountries,setMapCountries]=useState([])\n  const [country,setCountry]=useState(\"Worldwide\")//state is basically  VARIABLE in React\n  useEffect(()=>{\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then((response)=> response.json()\n    .then((data)=>{\n      setCountryInfo(data)\n    }))\n  },[])\n  \n  useEffect(()=>{\n//only runs once based on a condition\n    const getCountriesData = async()=>{\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response)=>response.json())\n      .then((data)=>{\n        const countries=data.map((country)=>(\n         { name:country.country,\n          value:country.countryInfo.iso2\n         }))\n         const sortedData=sortData(data)\n         setTableData(sortedData)\n         setCountries(countries);\n         setMapCountries(data)\n      })\n    }\n    getCountriesData()\n  },[])\n  const onCountryChange= async (e)=>{\n    const countryCode=e.target.value;\n    \n    const url=countryCode==='worldwide'?'https://disease.sh/v3/covid-19/all':`https://disease.sh/v3/covid-19/countries/${countryCode}`\n    \n    await fetch(url)\n    .then(response=>response.json())\n    .then(data=>{\n      setCountry(countryCode)\n      setCountryInfo(data)\n      setMapCenter([data.countryInfo.lat,data.countryInfo.long])\n    })\n    console.log(countryInfo)\n  }\n  return (\n    <div className=\"app\">\n      <div className=\"app_left\">\n      <div className=\"app_header\">\n      <h1>Covid-19 Tracker</h1>\n      <FormControl className=\"app_dropdown\">\n        <Select\n        variant=\"outlined\"\n        value={country}\n        onChange={onCountryChange}\n        ><MenuItem value={country}>{country}</MenuItem>\n          {/* loops thrugh all the countries and show a drop down list of the options */}\n          {countries.map((country)=>(\n              <MenuItem value={country.value}>{country.name}</MenuItem>\n          ))}\n          \n          \n\n        </Select>\n      </FormControl>\n      </div>\n      <div className=\"app_stats\">\n          <InfoBox isRed Select={casesType===\"cases\"} onClick={e=>setCasesType('cases')}\n          title=\"Coronavirus cases\" cases={prettyPrintStat(countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)}/>\n          <InfoBox Select={casesType===\"recovered\"} onClick={e=>setCasesType('recovered')}\n          title=\"Recovered\" cases={prettyPrintStat(countryInfo.todayRecovered)} total={prettyPrintStat(countryInfo.recovered)}/>\n          <InfoBox isRed Select={casesType===\"deaths\"} onClick={e=>setCasesType('deaths')}\n          title=\"Deaths\" cases={prettyPrintStat(countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.deaths)}/>\n      </div>\n      <Map \n      center={mapCenter} zoom={mapZoom} countries={mapCountries} casesType={casesType}\n      />\n      </div>\n      <Card className=\"app_right\">\n        <CardContent>\n          <h1>Live cases by country</h1>\n          <Table countries={tabledata}/>\n          <h1 className=\"app_graphTitle\">Worldwide new {casesType}</h1>\n          <LineGraph className=\"app_graph\" casesType={casesType}/>\n        </CardContent>\n      </Card>\n\n      \n      \n      {/* InfoBox */}\n      {/* InfoBox */}\n      {/* InfoBox\n      {/* table */}\n      {/* Graph */}\n      {/* Map */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}